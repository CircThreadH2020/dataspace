# https://www.haproxy.org/
# https://www.haproxy.com/blog/how-to-run-haproxy-with-docker/
# https://www.haproxy.com/blog/haproxy-configuration-basics-load-balance-your-servers/
# https://www.haproxy.com/blog/introduction-to-haproxy-acls/
# https://www.haproxy.com/blog/using-haproxy-as-an-api-gateway-part-1/
# https://www.haproxy.com/blog/four-examples-of-haproxy-rate-limiting/
# https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration/

# fall: how many failed health checks are required to flag a server is not available.
# rise: how many successful health checks are required to flag a server is available .
# maxconn: Up to N connections can be established at once to the server. Any more than that will be queued.
# timeout: You can define how long clients should be queued by adding the timeout queue setting.
#   Maximum time to wait in the queue for a connection slot to be free.
#   When a server's maxconn is reached, connections are left pending in a queue which may be server-specific or
#   global to the backend. In order not to wait indefinitely, a timeout is applied to requests pending in the queue.
#   If the timeout is reached, it is considered that the request will almost never be served, so it is dropped and
#   a 503 error is returned to the client.

# https://www.haproxy.com/blog/haproxy-ssl-termination/
# https://serversforhackers.com/c/using-ssl-certificates-with-haproxy

global
  #stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
  log stdout format raw local0 info
  ssl-default-bind-options ssl-min-ver TLSv1.2    # only TLS version 1.2 and newer is allowed

defaults
  mode http
  log global
  option httplog
  option log-health-checks
  option forwardfor         # requires http mode, Enable insertion of the X-Forwarded-For header to requests sent to servers
  timeout client 10s        # maximum inactivity time on the client side
                            # it applies when the client is expected to acknowledge or send data
                            # In TCP mode, (and to a lesser extent, in HTTP mode), it is highly recommended that the
                            #   client timeout remains equal to the server timeout in order to avoid complex situations to debug
  timeout connect 5s        # maximum time to wait for a connection attempt to a server to succeed
  timeout server 20s        # maximum time for pending data staying into output buffer
                            # it applies when the server is expected to acknowledge or send data
  timeout http-request 20s  # maximum allowed time to wait for a complete HTTP request

# -------------------------------------------------------------------------------------
# FRONT END section
# -------------------------------------------------------------------------------------

frontend public
  bind 0.0.0.0:8080 ssl crt /usr/local/etc/haproxy/server.pem 
  bind 0.0.0.0:8090 ssl crt /usr/local/etc/haproxy/server.pem
  http-request set-header X-Forwarded-Proto %[ssl_fc,iif(https,http)]

  # Rate limiting options
  # Dont allow more than 40 concurrent tcp connections OR 60 connections in 3 seconds
  tcp-request connection reject if { src_conn_cur(Abuse) ge 40 }
  tcp-request connection reject if { src_conn_rate(Abuse) ge 60 }
  tcp-request connection track-sc1 src table Abuse # Track previous metrics in the table Abuse

  # Variables to track amount of requests and error and flag the abuser
  acl abuse src_http_req_rate(Abuse) ge 1000 # Flag as abuse when does 1000 requests in 15s (time defined in the table)
  acl flag_abuser src_inc_gpc0(Abuse) ge 0 # Flag ip as abuser, if it appears in the table (greater than 0) is banned (already did something wrong)
  acl scanner src_http_err_rate(Abuse) ge 15 # Flag as scanner when requests generate more than 15 HTTP errors in 20s

  # Returns a 403 to the abuser and flags for tcp-reject next time
  http-request deny if abuse flag_abuser
  http-request deny if scanner flag_abuser

  # Reject connection ip was flagged as abuser
  tcp-request content reject if { src_get_gpc0(Abuse) gt 0 }

  # Redirect from http to https
  http-request redirect scheme https code 301 unless { ssl_fc }

  use_backend circthread-connector  if { path_beg /<REPLACE_WITH_ORG_UNIQUE_ID> }  { dst_port 8080 }
  use_backend circthread-app4edi    if { path_beg /<REPLACE_WITH_ORG_UNIQUE_ID> }  { dst_port 8090 }

# -------------------------------------------------------------------------------------
# BACK END section
# -------------------------------------------------------------------------------------

# https://www.haproxy.com/blog/how-to-enable-health-checks-in-haproxy/
# We use active health check on each backend (uri=="/" for the connector and uri=="keep-alive" on the app4edi:
#   inter parameter - haproxy established a TCP connection every 5 secs
#   fall parameter - how many failed checks are allowed, after 4 failed connections, the server is removed, temporarily
#   rise pasameter - how many passing checks there must be before returning a previously failed server to the pool

# maxconn parameter - limits the maximum number of connections that HAProxy will accept
# timeout queue parameter - a client will wait for up to 10 seconds in the queue, after which HAProxy returns a 503 Service Unavailable response to them

backend circthread-connector
  timeout queue 10s
  # We use passive health checks, successful responses are those that have an HTTP status code in the range 100-499, 501 or 505
  server circthread-connector circthread-connector:8080  check observe layer7  error-limit 30  on-error mark-down  maxconn 20 ssl verify none

backend circthread-app4edi
  timeout queue 10s
  option httpchk
  http-check connect default
  http-check send meth GET uri /<REPLACE_WITH_ORG_UNIQUE_ID>/keep-alive
  http-check expect status 200
  server circthread-app4edi   circthread-app4edi:8090    check inter 30s fall 4 rise 1  maxconn 20 ssl verify none

# Backends with a table that tracks the amount of metrics for each ip-addresses that access this gateway
# Can store up to 1 million records and each expire in 15 minutes
backend Abuse
  # stickiness table for the current section
  stick-table type ip size 1m expire 15m store conn_rate(5s),conn_cur,gpc0,http_req_rate(15s),http_err_rate(20s)
